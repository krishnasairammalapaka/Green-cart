<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart - Greens Cart</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>
<body class="bg-gray-100">
    <div class="min-h-screen flex">
        <!-- Include Sidebar -->
        <%- include('../partials/user-sidebar', { currentPage: 'cart' }) %>

        <!-- Main Content -->
        <div class="flex-1 p-8">
            <div class="mb-8">
                <h2 class="text-3xl font-bold text-gray-800">Shopping Cart</h2>
            </div>

            <%- include('../partials/error-message') %>

            <% if (cartItems && cartItems.length > 0) { %>
                <!-- Two Column Layout -->
                <div class="flex flex-col lg:flex-row gap-8">
                    <!-- Cart Items (Left Column) -->
                    <div class="flex-grow lg:w-2/3">
                        <div class="bg-white rounded-lg shadow overflow-hidden">
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Item</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Price</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Quantity</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Subtotal</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        <% let total = 0; %>
                                        <% cartItems.forEach(item => { %>
                                            <% const subtotal = parseFloat(item.vegetables.price) * parseInt(item.quantity); %>
                                            <% total += subtotal; %>
                                            <tr>
                                                <td class="px-6 py-4">
                                                    <div class="flex items-center">
                                                        <img src="<%- item.vegetables.image_url %>" 
                                                             alt="<%- item.vegetables.name %>" 
                                                             class="h-16 w-16 object-cover rounded">
                                                        <div class="ml-4">
                                                            <div class="text-sm font-medium text-gray-900">
                                                                <%- item.vegetables.name %>
                                                            </div>
                                                            <div class="text-sm text-gray-500">
                                                                <%- item.vegetables.category %> | <%- item.vegetables.unit %>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="px-6 py-4">₹<%- item.vegetables.price.toFixed(2) %></td>
                                                <td class="px-6 py-4">
                                                    <div class="flex items-center space-x-2">
                                                        <button onclick="updateQuantity(`<%- item.id %>`, <%- item.quantity - 1 %>)"
                                                                class="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300"
                                                                <%- item.quantity <= 1 ? 'disabled' : '' %>>
                                                            -
                                                        </button>
                                                        <span class="w-8 text-center"><%- item.quantity %></span>
                                                        <button onclick="updateQuantity(`<%- item.id %>`, <%- item.quantity + 1 %>)"
                                                                class="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300">
                                                            +
                                                        </button>
                                                    </div>
                                                </td>
                                                <td class="px-6 py-4 font-medium">₹<%- subtotal.toFixed(2) %></td>
                                                <td class="px-6 py-4">
                                                    <button onclick="removeItem(`<%- item.id %>`)"
                                                            class="text-red-600 hover:text-red-900">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- Order Summary (Right Column) -->
                    <div class="lg:w-1/3">
                        <div class="bg-white rounded-lg shadow p-6 sticky top-8">
                            <h3 class="text-xl font-bold text-gray-800 mb-6">Order Summary</h3>
                            <div class="space-y-4">
                                <div class="flex justify-between text-gray-600">
                                    <span>Subtotal</span>
                                    <span>₹<%- total.toFixed(2) %></span>
                                </div>
                                <div class="flex justify-between text-gray-600">
                                    <span>Delivery Fee</span>
                                    <span>₹50.00</span>
                                </div>
                                <div class="flex justify-between text-gray-600">
                                    <span>Tax (5%)</span>
                                    <span>₹<%- (total * 0.05).toFixed(2) %></span>
                                </div>
                                <div class="border-t pt-4 mt-4">
                                    <div class="flex justify-between text-lg font-bold">
                                        <span>Total</span>
                                        <span>₹<%- (total + 50 + (total * 0.05)).toFixed(2) %></span>
                                    </div>
                                </div>
                                <div class="mt-6 flex justify-end">
                                    <button onclick="placeOrder()" 
                                            class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all duration-200 flex items-center">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                  d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                        </svg>
                                        Place Order
                                    </button>
                                </div>
                                <a href="/user/marketplace" 
                                   class="block text-center mt-4 text-green-600 hover:text-green-700">
                                    Continue Shopping
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            <% } else { %>
                <!-- Empty Cart State -->
                <div class="bg-white rounded-lg shadow p-8 text-center">
                    <div class="mb-6">
                        <svg class="w-16 h-16 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                    </div>
                    <p class="text-xl text-gray-600 mb-6">Your cart is empty</p>
                    <a href="/user/marketplace" 
                       class="inline-block px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200">
                        Start Shopping
                    </a>
                </div>
            <% } %>
        </div>
    </div>

    <script>
        async function updateQuantity(itemId, newQuantity) {
            if (newQuantity < 1) return;
            
            try {
                const response = await fetch(`/user/cart/update/${itemId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ quantity: newQuantity })
                });

                if (response.ok) {
                    window.location.reload();
                } else {
                    const data = await response.json();
                    alert(data.error || 'Failed to update quantity');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to update quantity');
            }
        }

        async function removeItem(itemId) {
            if (!confirm('Are you sure you want to remove this item?')) return;

            try {
                const response = await fetch(`/user/cart/remove/${itemId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    window.location.reload();
                } else {
                    const data = await response.json();
                    alert(data.error || 'Failed to remove item');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to remove item');
            }
        }

        async function placeOrder() {
            try {
                const response = await fetch('/user/create-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to create order');
                }
                
                const data = await response.json();
                
                const options = {
                    key: 'rzp_test_CVbypqu6YtbzvT',
                    amount: data.amount,
                    currency: data.currency,
                    name: 'Greens Cart',
                    description: 'Purchase of Vegetables',
                    order_id: data.razorpayOrderId,
                    handler: async function (response) {
                        try {
                            const verifyResponse = await fetch('/user/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    orderId: data.orderId,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });

                            if (!verifyResponse.ok) {
                                throw new Error('Payment verification failed');
                            }

                            const verifyData = await verifyResponse.json();
                            if (verifyData.success) {
                                window.location.href = '/user/order-success';
                            } else {
                                alert('Payment verification failed');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Payment verification failed');
                        }
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>'
                    },
                    theme: {
                        color: '#16a34a'
                    },
                    modal: {
                        ondismiss: function() {
                            alert('Payment cancelled');
                        }
                    }
                };

                const rzp = new Razorpay(options);
                rzp.on('payment.failed', function (response) {
                    alert('Payment failed: ' + response.error.description);
                });
                rzp.open();
                
            } catch (error) {
                console.error('Error:', error);
                alert(error.message || 'Failed to create order');
            }
        }
    </script>
</body>
</html> 