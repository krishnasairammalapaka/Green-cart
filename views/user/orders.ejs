<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders - Greens Cart</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .order-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 40;
            backdrop-filter: blur(4px);
        }

        .order-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.95);
            background: white;
            width: 90%;
            max-width: 600px;
            max-height: 85vh;
            overflow-y: auto;
            border-radius: 1rem;
            z-index: 50;
            display: none;
            opacity: 0;
            transition: all 0.3s ease-in-out;
        }

        .order-modal.show {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
        }

        .order-card {
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .order-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

        /* Custom scrollbar for modal */
        .order-modal::-webkit-scrollbar {
            width: 8px;
        }

        .order-modal::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        .order-modal::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

        .order-modal::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="min-h-screen flex">
        <!-- Include Sidebar -->
        <%- include('../partials/user-sidebar', { currentPage: 'orders' }) %>

        <!-- Main Content -->
        <div class="flex-1 p-8">
            <div class="mb-8 flex justify-between items-center">
                <div>
                    <h2 class="text-3xl font-bold text-gray-800">My Orders</h2>
                    <p class="text-gray-600 mt-2">Track and manage your orders</p>
                </div>

                <!-- Sorting and Filtering Options -->
                <div class="flex space-x-2">
                    <button onclick="filterOrders('all')" 
                            class="filter-btn px-4 py-2 rounded-lg bg-green-600 text-white hover:bg-green-700 transition">
                        All
                    </button>
                    <button onclick="filterOrders('pending')" 
                            class="filter-btn px-4 py-2 rounded-lg bg-yellow-100 text-yellow-800 hover:bg-yellow-200 transition">
                        Pending
                    </button>
                    <button onclick="filterOrders('completed')" 
                            class="filter-btn px-4 py-2 rounded-lg bg-green-100 text-green-800 hover:bg-green-200 transition">
                        Completed
                    </button>
                </div>
            </div>

            <%- include('../partials/error-message') %>

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <% if (orders && orders.length > 0) { %>
                    <% 
                    // Sort orders by created_at in descending order
                    const sortedOrders = [...orders].sort((a, b) => {
                        return new Date(b.created_at) - new Date(a.created_at);
                    });
                    
                    sortedOrders.forEach(order => { 
                    %>
                        <div class="order-card bg-white rounded-lg shadow-md overflow-hidden" 
                             onclick="showOrderDetails('<%= JSON.stringify(order) %>')"
                             data-status="<%= order.status %>">
                            <div class="p-6">
                                <div class="flex justify-between items-start">
                                    <div>
                                        <h3 class="text-lg font-semibold">Order #<%= order.id.slice(-8) %></h3>
                                        <p class="text-sm text-gray-500">
                                            <%= new Date(order.created_at).toLocaleDateString('en-US', { 
                                                year: 'numeric', 
                                                month: 'long', 
                                                day: 'numeric',
                                                hour: '2-digit',
                                                minute: '2-digit'
                                            }) %>
                                        </p>
                                    </div>
                                    <span class="status-badge px-3 py-1 rounded-full text-sm
                                        <%= order.status === 'completed' ? 'bg-green-100 text-green-800' : 
                                           order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                           'bg-red-100 text-red-800' %>">
                                        <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                    </span>
                                </div>

                                <!-- Add Items Preview Section -->
                                <div class="mt-4 border-t pt-4">
                                    <h4 class="text-sm font-medium text-gray-700 mb-2">Items:</h4>
                                    <div class="space-y-2">
                                        <% order.items.slice(0, 3).forEach(item => { %>
                                            <div class="flex items-center justify-between text-sm">
                                                <div class="flex items-center">
                                                    <img src="<%= item.vegetables.image_url %>" 
                                                         alt="<%= item.vegetables.name %>"
                                                         class="w-8 h-8 object-cover rounded-md mr-2">
                                                    <span class="text-gray-800"><%= item.vegetables.name %></span>
                                                </div>
                                                <div class="text-gray-600">
                                                    <%= item.quantity %> × ₹<%= item.price.toFixed(2) %>
                                                </div>
                                            </div>
                                        <% }); %>
                                        <% if (order.items.length > 3) { %>
                                            <div class="text-sm text-gray-500 italic">
                                                + <%= order.items.length - 3 %> more items
                                            </div>
                                        <% } %>
                                    </div>
                                </div>

                                <div class="mt-4 flex justify-between items-center">
                                    <span class="text-sm text-gray-500"><%= order.items.length %> items</span>
                                    <span class="font-bold">₹<%= order.total_amount.toFixed(2) %></span>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="col-span-full bg-white rounded-lg shadow p-8 text-center">
                        <div class="mb-6">
                            <svg class="w-16 h-16 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                      d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                            </svg>
                        </div>
                        <p class="text-xl text-gray-600 mb-6">No orders found</p>
                        <a href="/user/marketplace" 
                           class="inline-block px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200">
                            Start Shopping
                        </a>
                    </div>
                <% } %>
            </div>

            <!-- Add this temporarily to debug -->
            <pre style="display: none;">
                <%= JSON.stringify(orders, null, 2) %>
            </pre>
        </div>
    </div>

    <!-- Order Details Modal -->
    <div class="order-overlay" id="orderOverlay" onclick="hideOrderDetails()"></div>
    <div class="order-modal" id="orderModal">
        <!-- Modal content will be dynamically inserted here -->
    </div>

    <script>
        function showOrderDetails(orderJson) {
            try {
                const order = JSON.parse(orderJson);
                const modal = document.getElementById('orderModal');
                const overlay = document.getElementById('orderOverlay');
                
                // Generate modal content
                modal.innerHTML = `
                    <div class="p-6">
                        <div class="flex justify-between items-start mb-6">
                            <div>
                                <h3 class="text-2xl font-bold text-gray-800">Order Details</h3>
                                <p class="text-gray-600">Order #${order.id.slice(-8)}</p>
                            </div>
                            <button onclick="event.stopPropagation(); hideOrderDetails()" 
                                    class="text-gray-400 hover:text-gray-600">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                </svg>
                            </button>
                        </div>

                        <div class="space-y-6">
                            <!-- Order Status -->
                            <div class="flex items-center justify-between pb-4 border-b">
                                <span class="text-gray-600">Status</span>
                                <span class="px-3 py-1 rounded-full text-sm
                                    ${order.status === 'completed' ? 'bg-green-100 text-green-800' : 
                                      order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                      'bg-red-100 text-red-800'}">
                                    ${order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                                </span>
                            </div>

                            <!-- Order Items -->
                            <div>
                                <h4 class="font-semibold text-gray-800 mb-4">Items</h4>
                                <div class="space-y-4">
                                    ${order.items.map(item => `
                                        <div class="flex items-center py-2 border-b">
                                            <img src="${item.vegetables.image_url}" 
                                                 alt="${item.vegetables.name}"
                                                 class="w-16 h-16 object-cover rounded-lg">
                                            <div class="ml-4 flex-grow">
                                                <div class="font-medium">${item.vegetables.name}</div>
                                                <div class="text-sm text-gray-500">
                                                    ${item.quantity} × ₹${item.price.toFixed(2)}
                                                </div>
                                            </div>
                                            <div class="text-right font-medium">
                                                ₹${(item.quantity * item.price).toFixed(2)}
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>

                            <!-- Order Summary -->
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <div class="space-y-2">
                                    <div class="flex justify-between text-sm">
                                        <span class="text-gray-600">Subtotal</span>
                                        <span>₹${(order.total_amount - order.delivery_fee).toFixed(2)}</span>
                                    </div>
                                    <div class="flex justify-between text-sm">
                                        <span class="text-gray-600">Delivery Fee</span>
                                        <span>₹${order.delivery_fee.toFixed(2)}</span>
                                    </div>
                                    <div class="flex justify-between font-bold text-lg pt-2 border-t">
                                        <span>Total</span>
                                        <span>₹${order.total_amount.toFixed(2)}</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Download Section -->
                            <div class="mt-6 pt-6 border-t">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <h4 class="font-semibold text-gray-800">Order Acknowledgment</h4>
                                        <p class="text-sm text-gray-500">Download your order details for your records</p>
                                    </div>
                                    <button onclick="downloadOrderPDF('${order.id}')" 
                                            class="download-btn flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                  d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                                        </svg>
                                        Download PDF
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Show modal and overlay with animation
                overlay.style.display = 'block';
                modal.style.display = 'block';
                setTimeout(() => {
                    modal.classList.add('show');
                    document.body.style.overflow = 'hidden'; // Prevent background scrolling
                }, 10);
            } catch (error) {
                console.error('Error showing order details:', error);
                alert('Error displaying order details');
            }
        }

        function hideOrderDetails() {
            const modal = document.getElementById('orderModal');
            const overlay = document.getElementById('orderOverlay');
            
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
                overlay.style.display = 'none';
                document.body.style.overflow = ''; // Restore scrolling
            }, 300);
        }

        function filterOrders(status) {
            document.querySelectorAll('.order-card').forEach(card => {
                if (status === 'all' || card.dataset.status === status) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });

            // Update filter buttons
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('bg-green-600', 'text-white');
                if (btn.textContent.toLowerCase().includes(status)) {
                    btn.classList.add('bg-green-600', 'text-white');
                }
            });
        }

        async function downloadOrderPDF(orderId) {
            try {
                const button = event.target.closest('.download-btn');
                const originalContent = button.innerHTML;
                
                // Show loading state
                button.innerHTML = `
                    <svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Generating PDF...
                `;
                button.disabled = true;

                const response = await fetch(`/user/orders/${orderId}/pdf`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/pdf'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                // Get the blob from the response
                const blob = await response.blob();
                
                // Create a URL for the blob
                const url = window.URL.createObjectURL(blob);
                
                // Create a temporary link element
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `order-${orderId.slice(-8)}.pdf`;
                
                // Add to document and click
                document.body.appendChild(a);
                a.click();
                
                // Cleanup
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);

                // Restore button state
                button.innerHTML = originalContent;
                button.disabled = false;

                // Show success message
                const toast = document.createElement('div');
                toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300';
                toast.textContent = 'PDF downloaded successfully!';
                document.body.appendChild(toast);
                
                // Remove toast after 3 seconds
                setTimeout(() => {
                    toast.style.opacity = '0';
                    setTimeout(() => document.body.removeChild(toast), 300);
                }, 3000);

            } catch (error) {
                console.error('Error downloading PDF:', error);
                alert('Failed to download PDF. Please try again.');
                
                // Restore button state
                if (button) {
                    button.innerHTML = originalContent;
                    button.disabled = false;
                }
            }
        }
    </script>

    <%- include('../partials/chatbot') %>
</body>
</html> 