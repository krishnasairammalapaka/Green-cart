<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Dashboard - Admin</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .weather-card {
            transition: all 0.3s ease;
        }
        .weather-card:hover {
            transform: translateY(-2px);
        }
        .location-suggestions {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            z-index: 50;
            max-height: 200px;
            overflow-y: auto;
        }
        .suggestion-item {
            padding: 0.75rem 1rem;
            cursor: pointer;
            transition: all 0.2s;
        }
        .suggestion-item:hover {
            background-color: #f3f4f6;
        }
        .suggestion-item.selected {
            background-color: #e5e7eb;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="min-h-screen flex">
        <!-- Include Admin Sidebar -->
        <%- include('../partials/admin-sidebar', { currentPage: 'weather' }) %>

        <!-- Main Content -->
        <div class="flex-1 p-8">
            <div class="max-w-4xl mx-auto">
                <div class="mb-8">
                    <h2 class="text-3xl font-bold text-gray-800">Weather Dashboard</h2>
                    <p class="text-gray-600 mt-2">Monitor weather conditions for delivery planning</p>
                </div>

                <!-- Search Section -->
                <div class="mb-8">
                    <div class="relative">
                        <div class="flex gap-4">
                            <div class="flex-1 relative">
                                <input type="text" 
                                       id="locationSearch" 
                                       placeholder="Search for a location..." 
                                       class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                                       autocomplete="off">
                                <div id="locationSuggestions" class="location-suggestions hidden"></div>
                            </div>
                            <button onclick="performSearch()" 
                                    class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                                </svg>
                                Search
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Weather Display -->
                <% if (weather) { %>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Current Weather -->
                        <div class="weather-card bg-white p-6 rounded-xl shadow-md">
                            <div class="flex items-center justify-between mb-4">
                                <div>
                                    <h3 class="text-xl font-semibold"><%= weather.name %>, <%= weather.country %></h3>
                                    <p class="text-gray-500">Current Weather</p>
                                </div>
                                <img src="http://openweathermap.org/img/w/<%= weather.weather[0].icon %>.png" 
                                     alt="<%= weather.weather[0].description %>"
                                     class="w-16 h-16">
                            </div>
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <p class="text-3xl font-bold"><%= Math.round(weather.main.temp) %>°C</p>
                                    <p class="text-gray-500 capitalize"><%= weather.weather[0].description %></p>
                                </div>
                                <div class="text-right">
                                    <p class="text-gray-600">Humidity: <%= weather.main.humidity %>%</p>
                                    <p class="text-gray-600">Wind: <%= weather.wind.speed %> m/s</p>
                                </div>
                            </div>
                        </div>

                        <!-- Forecast -->
                        <div class="weather-card bg-white p-6 rounded-xl shadow-md">
                            <h3 class="text-xl font-semibold mb-4">5-Day Forecast</h3>
                            <div class="space-y-4">
                                <% let processedDates = new Set(); %>
                                <% forecast.list.forEach(item => { %>
                                    <% const date = new Date(item.dt * 1000).toLocaleDateString(); %>
                                    <% if (!processedDates.has(date)) { %>
                                        <% processedDates.add(date); %>
                                        <div class="flex items-center justify-between">
                                            <div class="flex items-center">
                                                <img src="http://openweathermap.org/img/w/<%= item.weather[0].icon %>.png" 
                                                     alt="<%= item.weather[0].description %>"
                                                     class="w-10 h-10 mr-2">
                                                <div>
                                                    <p class="font-medium"><%= date %></p>
                                                    <p class="text-sm text-gray-500 capitalize">
                                                        <%= item.weather[0].description %>
                                                    </p>
                                                </div>
                                            </div>
                                            <p class="text-lg font-semibold">
                                                <%= Math.round(item.main.temp) %>°C
                                            </p>
                                        </div>
                                    <% } %>
                                <% }); %>
                            </div>
                        </div>
                    </div>
                <% } else if (error) { %>
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
                        <%= error %>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDBRvts55sYzQ0hcPcF0qp6ApnwW-hHmYo&libraries=places"></script>
    <script>
        let autocomplete;
        let selectedIndex = -1;
        let suggestions = [];
        let searchCache = new Map(); // Cache for recent searches
        
        // Initialize Google Places Autocomplete with enhanced options
        function initAutocomplete() {
            const input = document.getElementById('locationSearch');
            const options = {
                types: ['(cities)'],
                fields: ['place_id', 'geometry', 'name', 'formatted_address'],
                strictBounds: false,
                componentRestrictions: { country: 'IN' } // Restrict to India
            };
            
            autocomplete = new google.maps.places.Autocomplete(input, options);
            
            // Handle place selection
            autocomplete.addListener('place_changed', () => {
                const place = autocomplete.getPlace();
                if (place.geometry) {
                    searchWeather(place.formatted_address);
                }
            });
        }

        // Enhanced search algorithm with fuzzy matching
        function fuzzyMatch(pattern, str) {
            pattern = pattern.toLowerCase();
            str = str.toLowerCase();
            let patternIdx = 0;
            let strIdx = 0;
            let match = false;
            let matches = [];

            while (strIdx < str.length) {
                if (pattern[patternIdx] === str[strIdx]) {
                    matches.push(strIdx);
                    patternIdx++;
                    if (patternIdx >= pattern.length) {
                        match = true;
                        break;
                    }
                }
                strIdx++;
            }

            return match ? matches : null;
        }

        // Improved debounce with immediate option
        function debounce(func, wait, immediate = false) {
            let timeout;
            return function(...args) {
                const later = () => {
                    timeout = null;
                    if (!immediate) func.apply(this, args);
                };
                const callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(this, args);
            };
        }

        // Enhanced search with multiple algorithms
        async function performSearch() {
            const query = searchInput.value.trim();
            if (!query) return;

            // Check cache first
            if (searchCache.has(query)) {
                displaySuggestions(searchCache.get(query));
                return;
            }

            try {
                // Parallel search using multiple services
                const [googleResults, customResults] = await Promise.all([
                    searchGooglePlaces(query),
                    searchCustomDatabase(query)
                ]);

                // Merge and rank results
                const mergedResults = mergeAndRankResults(googleResults, customResults);
                
                // Cache the results
                searchCache.set(query, mergedResults);
                
                // Update UI and perform weather search
                if (mergedResults.length > 0) {
                    const bestMatch = mergedResults[0];
                    searchWeather(bestMatch.description);
                } else {
                    alert('No locations found. Please try a different search term.');
                }
            } catch (error) {
                console.error('Search error:', error);
                alert('Search failed. Please try again.');
            }
        }

        // Search using Google Places
        async function searchGooglePlaces(query) {
            return new Promise((resolve) => {
                const service = new google.maps.places.AutocompleteService();
                service.getPlacePredictions({
                    input: query,
                    types: ['(cities)'],
                    componentRestrictions: { country: 'IN' }
                }, (results) => resolve(results || []));
            });
        }

        // Custom database search (can be extended with backend API)
        async function searchCustomDatabase(query) {
            // Implement your custom search logic here
            return [];
        }

        // Merge and rank results based on relevance
        function mergeAndRankResults(googleResults, customResults) {
            const allResults = [...googleResults, ...customResults];
            
            // Score and sort results
            return allResults
                .map(result => ({
                    ...result,
                    score: calculateRelevanceScore(result, searchInput.value)
                }))
                .sort((a, b) => b.score - a.score);
        }

        // Calculate relevance score for ranking
        function calculateRelevanceScore(result, query) {
            let score = 0;
            const description = result.description.toLowerCase();
            query = query.toLowerCase();

            // Exact match bonus
            if (description.includes(query)) {
                score += 10;
            }

            // Prefix match bonus
            if (description.startsWith(query)) {
                score += 5;
            }

            // Fuzzy match score
            const fuzzyMatches = fuzzyMatch(query, description);
            if (fuzzyMatches) {
                score += 3;
            }

            // Population/importance bias (if available)
            if (result.structured_formatting?.main_text_matched_substrings) {
                score += 2;
            }

            return score;
        }

        // Initialize event listeners
        document.addEventListener('DOMContentLoaded', () => {
            initAutocomplete();
            
            // Add keyboard event listener for search
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    performSearch();
                }
            });
        });

        // Search weather for location
        async function searchWeather(location) {
            window.location.href = `/admin/weather?location=${encodeURIComponent(location)}`;
        }
    </script>
</body>
</html> 