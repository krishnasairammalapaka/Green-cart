<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Orders</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDBRvts55sYzQ0hcPcF0qp6ApnwW-hHmYo&libraries=places"></script>
</head>
<body class="bg-gray-100">
    <div class="flex min-h-screen">
        <%- include('../partials/admin-sidebar', { currentPage: 'orders', orderCount: orders.length }) %>
        
        <div class="flex-1 p-8">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">Orders Management</h2>
                
                <!-- Filter Section -->
                <div class="flex gap-4">
                    <select id="statusFilter" class="px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500">
                        <option value="all">All Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Processing">Processing</option>
                        <option value="Completed">Completed</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                    <input type="text" placeholder="Search orders..." class="px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500">
                </div>
            </div>

            <!-- Orders Grid -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <% orders.forEach(order => { %>
                    <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
                        <!-- Order Header -->
                        <div class="p-4 border-b border-gray-200 bg-gray-50">
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-600">Order #<%= order._id %></span>
                                <span class="px-3 py-1 rounded-full text-xs font-semibold
                                    <%= order.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' : 
                                        order.status === 'Completed' ? 'bg-green-100 text-green-800' : 
                                        order.status === 'Processing' ? 'bg-blue-100 text-blue-800' :
                                        'bg-red-100 text-red-800' %>">
                                    <%= order.status %>
                                </span>
                            </div>
                        </div>

                        <!-- Customer Info -->
                        <div class="p-4">
                            <h3 class="text-lg font-semibold"><%= order.customerName %></h3>
                            <p class="text-sm text-gray-600">üìß <%= order.customerEmail %></p>
                            <% if (order.phone) { %>
                                <p class="text-sm text-gray-600">üìû <%= order.phone %></p>
                            <% } %>
                            <% if (order.address) { %>
                                <p class="text-sm text-gray-600">üìç <%= order.address %></p>
                            <% } %>
                            <p class="text-sm text-gray-600 mt-2">
                                üïí <%= new Date(order.orderDate).toLocaleDateString('en-US', { 
                                    year: 'numeric', 
                                    month: 'short', 
                                    day: 'numeric',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                }) %>
                            </p>
                        </div>

                        <!-- Order Items -->
                        <div class="p-4 bg-gray-50">
                            <h4 class="text-sm font-semibold text-gray-600 mb-2">Order Details:</h4>
                            <div class="space-y-2">
                                <% order.products.forEach(product => { %>
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm"><%= product.name %></span>
                                        <span class="text-sm font-medium">√ó <%= product.quantity %></span>
                                    </div>
                                <% }) %>
                            </div>
                        </div>

                        <!-- Order Footer -->
                        <div class="p-4 bg-white border-t border-gray-200">
                            <div class="flex justify-between items-center">
                                <div>
                                    <span class="text-sm text-gray-600">Total Amount:</span>
                                    <span class="text-lg font-bold ml-2">‚Çπ<%= order.totalAmount %></span>
                                </div>
                                <div class="flex gap-2">
                                    <button onclick="updateStatus('<%= order._id %>')" 
                                            class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm">
                                        Update
                                    </button>
                                    <button onclick="viewDetails('<%= order._id %>')"
                                            class="px-3 py-1 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 text-sm">
                                        Details
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>

            <!-- No Orders Message -->
            <% if (orders.length === 0) { %>
                <div class="text-center py-12">
                    <div class="text-gray-400 text-xl">No orders found</div>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Status Update Modal -->
    <div id="statusModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 w-96">
            <h3 class="text-lg font-semibold mb-4">Update Order Status</h3>
            <select id="newStatus" class="w-full p-2 mb-4 border rounded">
                <option value="Pending">Pending</option>
                <option value="Processing">Processing</option>
                <option value="Completed">Completed</option>
                <option value="Cancelled">Cancelled</option>
            </select>
            <div class="flex justify-end gap-2">
                <button onclick="closeModal()" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300">Cancel</button>
                <button onclick="saveStatus()" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">Save</button>
            </div>
        </div>
    </div>

    <!-- Add this modal before the closing body tag -->
    <div id="orderDetailsModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-2xl font-semibold">Order Details</h3>
                <button onclick="closeDetailsModal()" class="text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <div id="orderDetailsContent" class="space-y-6">
                <!-- Order Info Section -->
                <div class="border-b pb-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-600">Order ID</p>
                            <p class="font-semibold" id="modal-orderId"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Order Date</p>
                            <p class="font-semibold" id="modal-orderDate"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Status</p>
                            <p class="font-semibold" id="modal-status"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Total Amount</p>
                            <p class="font-semibold" id="modal-totalAmount"></p>
                        </div>
                    </div>
                </div>

                <!-- Customer Info Section -->
                <div class="border-b pb-4">
                    <h4 class="text-lg font-semibold mb-3">Customer Information</h4>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-600">Name</p>
                            <p class="font-semibold" id="modal-customerName"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Phone</p>
                            <p class="font-semibold" id="modal-phone"></p>
                        </div>
                        <div class="col-span-2">
                            <p class="text-sm text-gray-600">Delivery Address</p>
                            <p class="font-semibold" id="modal-address"></p>
                        </div>
                    </div>
                </div>

                <!-- Order Items Section -->
                <div>
                    <h4 class="text-lg font-semibold mb-3">Order Items</h4>
                    <div class="bg-gray-50 rounded-lg p-4">
                        <div id="modal-products" class="space-y-2"></div>
                    </div>
                </div>

                <!-- Delivery Location Section -->
                <div class="border-b pb-4">
                    <h4 class="text-lg font-semibold mb-3">Delivery Location</h4>
                    <div id="map" class="w-full h-[400px] rounded-lg"></div>
                    <div class="mt-4 grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-600">Estimated Distance:</p>
                            <p class="font-semibold" id="distance"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Estimated Time:</p>
                            <p class="font-semibold" id="duration"></p>
                        </div>
                    </div>
                </div>

                <!-- Actions Section -->
                <div class="flex justify-end gap-3 mt-6 pt-4 border-t">
                    <button onclick="closeDetailsModal()" 
                            class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">
                        Close
                    </button>
                    <button onclick="updateOrderStatus()" 
                            class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                        Update Status
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let map;
        let directionsService;
        let directionsRenderer;
        let driverMarker;
        let customerMarker;
        let currentOrderId = null;

        function initMap(customerAddress) {
            // Initialize services
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer();
            
            // Create map instance
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 12,
                center: { lat: 20.5937, lng: 78.9629 }, // Default center (India)
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });

            directionsRenderer.setMap(map);

            // Get driver's current location
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const driverLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };

                        // Geocode customer's address
                        const geocoder = new google.maps.Geocoder();
                        geocoder.geocode({ address: customerAddress }, (results, status) => {
                            if (status === "OK") {
                                const customerLocation = results[0].geometry.location;
                                
                                // Add driver marker
                                driverMarker = new google.maps.Marker({
                                    position: driverLocation,
                                    map: map,
                                    title: "Driver Location",
                                    icon: {
                                        url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                                    }
                                });

                                // Add customer marker
                                customerMarker = new google.maps.Marker({
                                    position: customerLocation,
                                    map: map,
                                    title: "Delivery Location",
                                    icon: {
                                        url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png"
                                    }
                                });

                                // Fit bounds to show both markers
                                const bounds = new google.maps.LatLngBounds();
                                bounds.extend(driverLocation);
                                bounds.extend(customerLocation);
                                map.fitBounds(bounds);

                                // Calculate and display route
                                calculateRoute(driverLocation, customerLocation);

                                // Start location updates
                                startLocationUpdates();
                            } else {
                                console.error("Geocoding failed:", status);
                                alert("Could not find the delivery address on the map.");
                            }
                        });
                    },
                    (error) => {
                        console.error("Error getting driver location:", error);
                        alert("Could not get driver's location. Please enable location services.");
                    }
                );
            }
        }

        function updateStatus(orderId) {
            currentOrderId = orderId;
            document.getElementById('statusModal').classList.remove('hidden');
        }

        function closeModal() {
            document.getElementById('statusModal').classList.add('hidden');
        }

        async function saveStatus() {
            const newStatus = document.getElementById('newStatus').value;
            try {
                const response = await fetch(`/admin/orders/${currentOrderId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status: newStatus })
                });

                if (response.ok) {
                    window.location.reload();
                } else {
                    alert('Failed to update status');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to update status');
            }
            closeModal();
        }

        async function viewDetails(orderId) {
            try {
                const response = await fetch(`/admin/orders/${orderId}/details`);
                if (!response.ok) throw new Error('Failed to fetch order details');
                
                const order = await response.json();
                
                // Populate modal with order details
                document.getElementById('modal-orderId').textContent = order.id;
                document.getElementById('modal-orderDate').textContent = new Date(order.created_at)
                    .toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'short', 
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                document.getElementById('modal-status').textContent = order.status;
                document.getElementById('modal-totalAmount').textContent = `‚Çπ${order.total_amount}`;
                document.getElementById('modal-customerName').textContent = order.customer_name;
                document.getElementById('modal-phone').textContent = order.phone_number || 'N/A';
                document.getElementById('modal-address').textContent = order.delivery_address || 'N/A';

                // Populate products
                const productsContainer = document.getElementById('modal-products');
                productsContainer.innerHTML = `
                    <div class="flex justify-between items-center">
                        <span class="text-sm">${order.product_name}</span>
                        <span class="text-sm font-medium">√ó ${order.quantity}</span>
                    </div>
                `;

                // Initialize map with customer's address
                initMap(order.delivery_address);

                // Show the modal
                document.getElementById('orderDetailsModal').classList.remove('hidden');
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to load order details');
            }
        }

        function calculateRoute(origin, destination) {
            const request = {
                origin: origin,
                destination: destination,
                travelMode: google.maps.TravelMode.DRIVING
            };

            directionsService.route(request, (result, status) => {
                if (status === "OK") {
                    directionsRenderer.setDirections(result);
                    
                    // Display distance and duration
                    const route = result.routes[0];
                    document.getElementById("distance").textContent = route.legs[0].distance.text;
                    document.getElementById("duration").textContent = route.legs[0].duration.text;
                }
            });
        }

        // Real-time location updates
        let locationUpdateInterval;
        function startLocationUpdates() {
            locationUpdateInterval = setInterval(() => {
                if (navigator.geolocation && driverMarker) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const newLocation = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude
                            };
                            driverMarker.setPosition(newLocation);
                            if (customerMarker) {
                                calculateRoute(newLocation, customerMarker.getPosition());
                            }
                        },
                        (error) => console.error("Error updating location:", error)
                    );
                }
            }, 10000); // Update every 10 seconds
        }

        function closeDetailsModal() {
            document.getElementById('orderDetailsModal').classList.add('hidden');
            clearInterval(locationUpdateInterval); // Stop location updates when modal is closed
        }

        function updateOrderStatus() {
            // Close details modal and open status update modal
            closeDetailsModal();
            updateStatus(currentOrderId);
        }

        // Close modal when clicking outside
        document.getElementById('orderDetailsModal').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                closeDetailsModal();
            }
        });
    </script>
</body>
</html>
