<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Orders - Admin Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .order-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 40;
            backdrop-filter: blur(4px);
        }

        .order-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.95);
            background: white;
            width: 90%;
            max-width: 600px;
            max-height: 85vh;
            overflow-y: auto;
            border-radius: 1rem;
            z-index: 50;
            display: none;
            opacity: 0;
            transition: all 0.3s ease-in-out;
        }

        .order-modal.show {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
        }

        .order-card {
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .order-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

        /* Custom scrollbar for modal */
        .order-modal::-webkit-scrollbar {
            width: 8px;
        }

        .order-modal::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        .order-modal::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

        .order-modal::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="min-h-screen flex">
        <%- include('../partials/admin-sidebar', { currentPage: 'orders' }) %>

        <div class="flex-1 p-8">
            <div class="mb-8 flex justify-between items-center">
                <div>
                    <h2 class="text-3xl font-bold text-gray-800">Manage Orders</h2>
                    <p class="text-gray-600 mt-2">View and manage customer orders</p>
                </div>

                <!-- Filters -->
                <div class="flex gap-4">
                    <select id="statusFilter" onchange="filterOrders()" class="px-4 py-2 border rounded-lg">
                        <option value="all">All Orders</option>
                        <option value="pending">Pending</option>
                        <option value="accepted">Accepted</option>
                        <option value="completed">Completed</option>
                        <option value="cancelled">Cancelled</option>
                    </select>
                    <select id="orderSort" onchange="sortOrders()" class="px-4 py-2 border rounded-lg">
                        <option value="date-desc">Latest First</option>
                        <option value="date-asc">Oldest First</option>
                        <option value="amount-desc">Amount: High to Low</option>
                        <option value="amount-asc">Amount: Low to High</option>
                    </select>
                </div>
            </div>

            <%- include('../partials/error-message') %>

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <% if (orders && orders.length > 0) { %>
                    <% orders.forEach(order => { %>
                        <div class="order-card bg-white rounded-lg shadow-md overflow-hidden" 
                             onclick="showOrderDetails('<%= JSON.stringify(order) %>')"
                             data-status="<%= order.status %>"
                             data-order-date="<%= new Date(order.created_at).getTime() %>"
                             data-order-amount="<%= order.total_amount %>">
                            <div class="p-6">
                                <div class="flex justify-between items-start">
                                    <div>
                                        <h3 class="text-lg font-semibold">Order #<%= order.id.slice(-8) %></h3>
                                        <p class="text-sm text-gray-500">
                                            <%= new Date(order.created_at).toLocaleDateString('en-US', { 
                                                year: 'numeric', 
                                                month: 'long', 
                                                day: 'numeric',
                                                hour: '2-digit',
                                                minute: '2-digit'
                                            }) %>
                                        </p>
                                        <p class="text-sm text-gray-600 mt-2">
                                            Customer: <%= order.users.name %><br>
                                            Email: <%= order.users.email %>
                                        </p>
                                    </div>
                                    <span class="status-badge px-3 py-1 rounded-full text-sm
                                        <%= order.status === 'completed' ? 'bg-green-100 text-green-800' : 
                                           order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                           order.status === 'accepted' ? 'bg-blue-100 text-blue-800' :
                                           'bg-red-100 text-red-800' %>">
                                        <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                    </span>
                                </div>
                                <div class="mt-4 flex justify-between items-center">
                                    <span class="text-sm text-gray-500"><%= order.items_count %> items</span>
                                    <span class="font-bold">â‚¹<%= order.total_amount.toFixed(2) %></span>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="col-span-full bg-white rounded-lg shadow p-8 text-center">
                        <div class="mb-6">
                            <svg class="w-16 h-16 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                      d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                            </svg>
                        </div>
                        <p class="text-xl text-gray-600">No orders found</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Order Details Modal -->
    <div class="order-overlay" id="orderOverlay" onclick="hideOrderDetails()"></div>
    <div class="order-modal" id="orderModal">
        <!-- Modal content will be dynamically inserted here -->
    </div>

    <script>
        function showOrderDetails(orderJson) {
            try {
                const order = JSON.parse(orderJson);
                const modal = document.getElementById('orderModal');
                const overlay = document.getElementById('orderOverlay');
                
                modal.innerHTML = `
                    <div class="p-6">
                        <div class="flex justify-between items-start mb-6">
                            <div>
                                <h3 class="text-2xl font-bold text-gray-800">Order Details</h3>
                                <p class="text-gray-600">Order #${order.id.slice(-8)}</p>
                            </div>
                            <button onclick="event.stopPropagation(); hideOrderDetails()" 
                                    class="text-gray-400 hover:text-gray-600">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                </svg>
                            </button>
                        </div>

                        <div class="space-y-6">
                            <!-- Customer Info -->
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <h4 class="font-semibold text-gray-800 mb-2">Customer Information</h4>
                                <p class="text-gray-600">Name: ${order.users.name}</p>
                                <p class="text-gray-600">Email: ${order.users.email}</p>
                            </div>

                            <!-- Order Status -->
                            <div class="flex items-center justify-between pb-4 border-b">
                                <span class="text-gray-600">Status</span>
                                <select onchange="updateOrderStatus('${order.id}', this.value)"
                                        class="px-3 py-1 border rounded-lg text-sm
                                            ${order.status === 'completed' ? 'bg-green-100 text-green-800' : 
                                              order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                              order.status === 'accepted' ? 'bg-blue-100 text-blue-800' :
                                              'bg-red-100 text-red-800'}">
                                    <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>Pending</option>
                                    <option value="accepted" ${order.status === 'accepted' ? 'selected' : ''}>Accepted</option>
                                    <option value="completed" ${order.status === 'completed' ? 'selected' : ''}>Completed</option>
                                    <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>Cancelled</option>
                                </select>
                            </div>

                            <!-- Order Items -->
                            <div>
                                <h4 class="font-semibold text-gray-800 mb-4">Items</h4>
                                <div class="space-y-4">
                                    ${order.order_items.map(item => `
                                        <div class="flex items-center py-2 border-b">
                                            <img src="${item.vegetables.image_url}" 
                                                 alt="${item.vegetables.name}"
                                                 class="w-16 h-16 object-cover rounded-lg">
                                            <div class="ml-4 flex-grow">
                                                <div class="font-medium">${item.vegetables.name}</div>
                                                <div class="text-sm text-gray-500">
                                                    ${item.quantity} Ã— â‚¹${item.price.toFixed(2)}
                                                </div>
                                            </div>
                                            <div class="text-right font-medium">
                                                â‚¹${(item.quantity * item.price).toFixed(2)}
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>

                            <!-- Order Summary -->
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <div class="space-y-2">
                                    <div class="flex justify-between text-sm">
                                        <span class="text-gray-600">Subtotal</span>
                                        <span>â‚¹${order.subtotal.toFixed(2)}</span>
                                    </div>
                                    <div class="flex justify-between text-sm">
                                        <span class="text-gray-600">Delivery Fee</span>
                                        <span>â‚¹50.00</span>
                                    </div>
                                    <div class="flex justify-between text-sm">
                                        <span class="text-gray-600">Tax (5%)</span>
                                        <span>â‚¹${(order.subtotal * 0.05).toFixed(2)}</span>
                                    </div>
                                    <div class="border-t pt-2 mt-2">
                                        <div class="flex justify-between font-bold">
                                            <span>Total</span>
                                            <span>â‚¹${order.total_amount.toFixed(2)}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Delivery Tracking -->
                            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                                <div class="flex justify-between items-center mb-4">
                                    <h3 class="text-lg font-semibold">Delivery Tracking</h3>
                                    <button onclick="startDelivery('${order.id}')" 
                                            class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                                        Start Delivery
                                    </button>
                                </div>
                                <div id="map-${order.id}" class="h-64 w-full rounded-lg mb-4"></div>
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <p class="text-sm text-gray-600">Delivery Address:</p>
                                        <p class="font-medium">
                                            ${order.users.address || 'No address provided'}<br>
                                            ${order.users.city || ''}, ${order.users.state || ''}<br>
                                            ${order.users.pincode || ''}
                                        </p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-600">Estimated Time:</p>
                                        <p class="font-medium" id="eta-${order.id}">Calculating...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                overlay.style.display = 'block';
                modal.style.display = 'block';
                setTimeout(() => {
                    modal.classList.add('show');
                    document.body.style.overflow = 'hidden';
                }, 10);
            } catch (error) {
                console.error('Error showing order details:', error);
                alert('Error displaying order details');
            }
        }

        function hideOrderDetails() {
            const modal = document.getElementById('orderModal');
            const overlay = document.getElementById('orderOverlay');
            
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
                overlay.style.display = 'none';
                document.body.style.overflow = '';
            }, 300);
        }

        async function updateOrderStatus(orderId, status) {
            try {
                const response = await fetch(`/admin/orders/${orderId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status })
                });

                if (!response.ok) throw new Error('Failed to update status');

                // Update UI without refreshing
                const orderCard = document.querySelector(`[data-order-id="${orderId}"]`);
                if (orderCard) {
                    const statusBadge = orderCard.querySelector('.status-badge');
                    statusBadge.className = `status-badge px-3 py-1 rounded-full text-sm ${
                        status === 'completed' ? 'bg-green-100 text-green-800' : 
                        status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                        status === 'accepted' ? 'bg-blue-100 text-blue-800' :
                        'bg-red-100 text-red-800'
                    }`;
                    statusBadge.textContent = status.charAt(0).toUpperCase() + status.slice(1);
                    orderCard.dataset.status = status;
                }

                // Show success message
                const toast = document.createElement('div');
                toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300';
                toast.textContent = 'Order status updated successfully!';
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    toast.style.opacity = '0';
                    setTimeout(() => document.body.removeChild(toast), 300);
                }, 3000);

            } catch (error) {
                console.error('Error:', error);
                alert('Failed to update order status');
            }
        }

        function filterOrders() {
            const status = document.getElementById('statusFilter').value;
            document.querySelectorAll('.order-card').forEach(card => {
                if (status === 'all' || card.dataset.status === status) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        function sortOrders() {
            const container = document.querySelector('.grid');
            const orders = Array.from(container.getElementsByClassName('order-card'));
            const sortBy = document.getElementById('orderSort').value;

            orders.sort((a, b) => {
                if (sortBy === 'date-desc' || sortBy === 'date-asc') {
                    const dateA = parseInt(a.dataset.orderDate);
                    const dateB = parseInt(b.dataset.orderDate);
                    return sortBy === 'date-desc' ? dateB - dateA : dateA - dateB;
                } else {
                    const amountA = parseFloat(a.dataset.orderAmount);
                    const amountB = parseFloat(b.dataset.orderAmount);
                    return sortBy === 'amount-desc' ? amountB - amountA : amountA - amountB;
                }
            });

            orders.forEach(order => container.appendChild(order));
        }
    </script>

    <!-- Add this before closing body tag -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDBRvts55sYzQ0hcPcF0qp6ApnwW-hHmYo&libraries=places"></script>
    <script>
    let deliveryMarkers = {};
    let deliveryMaps = {};
    let watchIds = {};

    async function startDelivery(orderId) {
        if (!navigator.geolocation) {
            alert('Geolocation is not supported by your browser');
            return;
        }

        try {
            // Get delivery address from the database
            const response = await fetch(`/admin/orders/${orderId}/delivery-info`);
            const deliveryInfo = await response.json();
            
            if (!deliveryInfo.address) {
                alert('Delivery address not found');
                return;
            }

            // Initialize map if not already initialized
            if (!deliveryMaps[orderId]) {
                initializeMap(orderId, deliveryInfo);
            }

            // Start tracking current location
            watchIds[orderId] = navigator.geolocation.watchPosition(
                (position) => updateDeliveryLocation(position, orderId, deliveryInfo),
                (error) => console.error('Error getting location:', error),
                { enableHighAccuracy: true }
            );

            // Update order status to "out_for_delivery"
            await fetch(`/admin/orders/${orderId}/status`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: 'out_for_delivery' })
            });

        } catch (error) {
            console.error('Error starting delivery:', error);
            alert('Failed to start delivery tracking');
        }
    }

    function initializeMap(orderId, deliveryInfo) {
        const mapElement = document.getElementById(`map-${orderId}`);
        const deliveryLocation = { 
            lat: deliveryInfo.latitude, 
            lng: deliveryInfo.longitude 
        };

        const map = new google.maps.Map(mapElement, {
            zoom: 13,
            center: deliveryLocation
        });

        // Add delivery location marker
        new google.maps.Marker({
            position: deliveryLocation,
            map: map,
            icon: {
                url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                labelOrigin: new google.maps.Point(16, 40)
            },
            label: {
                text: 'Delivery Location',
                color: '#C53030'
            }
        });

        // Add delivery person marker
        deliveryMarkers[orderId] = new google.maps.Marker({
            map: map,
            icon: {
                url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
                labelOrigin: new google.maps.Point(16, 40)
            },
            label: {
                text: 'Delivery Person',
                color: '#2B6CB0'
            }
        });

        deliveryMaps[orderId] = map;
    }

    async function updateDeliveryLocation(position, orderId, deliveryInfo) {
        const currentLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
        };

        // Update marker position
        deliveryMarkers[orderId].setPosition(currentLocation);

        // Center map to show both points
        const bounds = new google.maps.LatLngBounds();
        bounds.extend(currentLocation);
        bounds.extend({ lat: deliveryInfo.latitude, lng: deliveryInfo.longitude });
        deliveryMaps[orderId].fitBounds(bounds);

        // Calculate and update ETA
        try {
            const directionsService = new google.maps.DirectionsService();
            const result = await directionsService.route({
                origin: currentLocation,
                destination: { lat: deliveryInfo.latitude, lng: deliveryInfo.longitude },
                travelMode: google.maps.TravelMode.DRIVING
            });

            const eta = result.routes[0].legs[0].duration.text;
            document.getElementById(`eta-${orderId}`).textContent = `ETA: ${eta}`;

            // Draw route
            new google.maps.DirectionsRenderer({
                map: deliveryMaps[orderId],
                directions: result,
                suppressMarkers: true
            });

            // Update delivery status in database
            await fetch(`/admin/orders/${orderId}/update-location`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    latitude: currentLocation.lat,
                    longitude: currentLocation.lng,
                    eta: eta
                })
            });

        } catch (error) {
            console.error('Error updating delivery location:', error);
        }
    }

    // Cleanup when leaving page
    window.addEventListener('beforeunload', () => {
        Object.values(watchIds).forEach(id => navigator.geolocation.clearWatch(id));
    });
    </script>
</body>
</html> 