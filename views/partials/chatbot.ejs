<div id="chatbot" class="fixed bottom-4 right-4 z-50">
    <!-- Chat Button -->
    <button id="chatButton" 
            class="bg-green-600 text-white rounded-full p-4 shadow-lg hover:bg-green-700 transition-colors duration-200">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
        </svg>
    </button>

    <!-- Chat Window -->
    <div id="chatWindow" 
         class="hidden fixed bottom-20 right-4 w-96 bg-white rounded-lg shadow-xl border border-gray-200">
        <div class="p-4 border-b border-gray-200 bg-green-600 text-white rounded-t-lg flex justify-between items-center">
            <h3 class="font-semibold">Green Cart Support</h3>
            <button id="closeChatButton" class="text-white hover:text-gray-200">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            </button>
        </div>
        <div id="chatMessages" class="p-4 h-96 overflow-y-auto space-y-4"></div>
        <div class="p-4 border-t border-gray-200">
            <form id="chatForm" class="flex space-x-2">
                <input type="text" 
                       id="messageInput"
                       class="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                       placeholder="Type your message...">
                <button type="submit" 
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
                    Send
                </button>
            </form>
        </div>
    </div>
</div>

<script>
const GEMINI_API_KEY = 'AIzaSyCIJPZ8VzWS-FI5PrM_l-L-ibtpAd7HAkk';

class ChatBot {
    constructor() {
        this.chatButton = document.getElementById('chatButton');
        this.chatWindow = document.getElementById('chatWindow');
        this.closeChatButton = document.getElementById('closeChatButton');
        this.chatForm = document.getElementById('chatForm');
        this.messageInput = document.getElementById('messageInput');
        this.chatMessages = document.getElementById('chatMessages');
        
        this.initializeEventListeners();
    }

    initializeEventListeners() {
        this.chatButton.addEventListener('click', () => this.toggleChat());
        this.closeChatButton.addEventListener('click', () => this.toggleChat());
        this.chatForm.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    toggleChat() {
        this.chatWindow.classList.toggle('hidden');
    }

    async handleSubmit(e) {
        e.preventDefault();
        const message = this.messageInput.value.trim();
        if (!message) return;

        // Add user message to chat
        this.addMessage('user', message);
        this.messageInput.value = '';

        // Show loading indicator
        this.addLoadingIndicator();

        try {
            const response = await this.getGeminiResponse(message);
            this.removeLoadingIndicator();
            this.addMessage('bot', response);
        } catch (error) {
            console.error('Error:', error);
            this.removeLoadingIndicator();
            this.addMessage('bot', 'Sorry, I encountered an error. Please try again.');
        }
    }

    async getGeminiResponse(message) {
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: message
                    }]
                }]
            })
        });

        const data = await response.json();
        return data.candidates[0].content.parts[0].text;
    }

    addMessage(type, content) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `p-3 rounded-lg ${
            type === 'user' 
                ? 'bg-green-100 ml-8' 
                : 'bg-gray-100 mr-8'
        }`;
        messageDiv.textContent = content;
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    addLoadingIndicator() {
        const loadingDiv = document.createElement('div');
        loadingDiv.id = 'loadingIndicator';
        loadingDiv.className = 'p-3 rounded-lg bg-gray-100 mr-8';
        loadingDiv.textContent = 'Typing...';
        this.chatMessages.appendChild(loadingDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    removeLoadingIndicator() {
        const loadingDiv = document.getElementById('loadingIndicator');
        if (loadingDiv) {
            loadingDiv.remove();
        }
    }
}

// Initialize chatbot when the page loads
document.addEventListener('DOMContentLoaded', () => {
    new ChatBot();
});
</script> 