<div id="chatbot" class="fixed bottom-4 right-4 z-50">
    <!-- Chat Button -->
    <button id="chatButton" 
            class="bg-green-600 text-white rounded-full p-4 shadow-lg hover:bg-green-700 transition-colors duration-200">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
        </svg>
    </button>

    <!-- Chat Window -->
    <div id="chatWindow" 
         class="hidden fixed bottom-20 right-4 w-96 bg-white rounded-lg shadow-xl border border-gray-200">
        <div class="p-4 border-b border-gray-200 bg-green-600 text-white rounded-t-lg flex justify-between items-center">
            <h3 class="font-semibold">Green Cart Support</h3>
            <button id="closeChatButton" class="text-white hover:text-gray-200">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            </button>
        </div>
        <div id="chatMessages" class="p-4 h-96 overflow-y-auto space-y-4"></div>
        <div class="p-2 bg-gray-50">
            <p class="text-sm text-gray-600 mb-2">Quick suggestions:</p>
            <div class="flex flex-wrap gap-2">
                <button class="quick-suggestion bg-green-100 text-green-800 text-xs px-3 py-1 rounded-full hover:bg-green-200" data-query="What's in season?">Seasonal Veggies</button>
                <button class="quick-suggestion bg-green-100 text-green-800 text-xs px-3 py-1 rounded-full hover:bg-green-200" data-query="Suggest a healthy recipe">Recipe Ideas</button>
                <button class="quick-suggestion bg-green-100 text-green-800 text-xs px-3 py-1 rounded-full hover:bg-green-200" data-query="How to store vegetables?">Storage Tips</button>
                <button class="quick-suggestion bg-green-100 text-green-800 text-xs px-3 py-1 rounded-full hover:bg-green-200" data-query="Green Goddess Salad">Green Goddess Salad</button>
            </div>
        </div>
        <div class="p-4 border-t border-gray-200">
            <form id="chatForm" class="flex space-x-2">
                <input type="text" 
                       id="messageInput"
                       class="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                       placeholder="Type your message...">
                <button type="submit" 
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
                    Send
                </button>
            </form>
        </div>
    </div>
</div>

<script>
const GEMINI_API_KEY = '<%= process.env.GEMINI_API_KEY %>';
console.log('API Key available:', !!GEMINI_API_KEY);

class ChatBot {
    constructor() {
        this.chatButton = document.getElementById('chatButton');
        this.chatWindow = document.getElementById('chatWindow');
        this.closeChatButton = document.getElementById('closeChatButton');
        this.chatForm = document.getElementById('chatForm');
        this.messageInput = document.getElementById('messageInput');
        this.chatMessages = document.getElementById('chatMessages');
        
        this.initializeEventListeners();
        this.initializeQuickSuggestions();
    }

    initializeEventListeners() {
        this.chatButton.addEventListener('click', () => this.toggleChat());
        this.closeChatButton.addEventListener('click', () => this.toggleChat());
        this.chatForm.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    initializeQuickSuggestions() {
        document.querySelectorAll('.quick-suggestion').forEach(button => {
            button.addEventListener('click', (e) => {
                this.messageInput.value = e.target.dataset.query;
                this.handleSubmit(new Event('submit'));
            });
        });
    }

    toggleChat() {
        this.chatWindow.classList.toggle('hidden');
    }

    async handleSubmit(e) {
        e.preventDefault();
        const message = this.messageInput.value.trim();
        if (!message) return;

        // Add user message to chat
        this.addMessage('user', message);
        this.messageInput.value = '';

        // Show loading indicator
        this.addLoadingIndicator();

        try {
            // First try local responses
            const localResponse = this.getLocalResponse(message);
            if (localResponse) {
                this.removeLoadingIndicator();
                this.addMessage('bot', localResponse);
                return;
            }

            // If no local response, use Gemini API
            const response = await this.getGeminiResponse(message);
            this.removeLoadingIndicator();
            this.addMessage('bot', response);
        } catch (error) {
            console.error('Error:', error);
            this.removeLoadingIndicator();
            this.addErrorMessage();
        }
    }

    async getGeminiResponse(message) {
        try {
            const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: `You are a helpful assistant for Green Cart, an eco-friendly e-commerce platform specializing in fresh vegetables and healthy food.
                            Your primary functions are:
                            1. Assist with vegetable selection and booking
                            2. Provide healthy recipe suggestions including:
                               - List of ingredients (preferably using Green Cart's available produce)
                               - Step-by-step cooking instructions
                               - Health benefits of the ingredients
                               - Storage tips for ingredients
                            3. Offer meal planning advice
                            4. Suggest seasonal vegetables
                            5. Provide storage tips for vegetables
                            6. Answer questions about organic farming practices
                            7. Provide nutritional information when requested
                            8. Suggest recipe variations based on available ingredients
                            9. Offer tips for meal prep and storage
                            10. Provide serving suggestions and pairing ideas
                            
                            Current vegetable availability:
                            - Leafy greens: Spinach, Kale, Lettuce
                            - Root vegetables: Carrots, Beets, Radishes
                            - Seasonal: Tomatoes, Cucumbers, Bell Peppers
                            - Herbs: Basil, Cilantro, Mint
                            
                            User question: ${message}
                            
                            Guidelines for responses:
                            - Keep responses concise and practical
                            - Always suggest Green Cart's services when relevant
                            - Provide specific vegetable recommendations when asked
                            - Include cooking tips when suggesting recipes
                            - Mention health benefits of suggested vegetables
                            - If unsure, ask clarifying questions
                            - For technical issues, suggest contacting support
                            - For order issues, suggest checking the order status page`
                        }]
                    }],
                    generationConfig: {
                        temperature: 0.5,
                        topP: 0.9,
                        maxOutputTokens: 500
                    }
                })
            });

            if (!response.ok) {
                // Check for specific error codes
                if (response.status === 400) {
                    throw new Error('Invalid request. Please check your input.');
                } else if (response.status === 401) {
                    throw new Error('Authentication failed. Please check your API key.');
                } else if (response.status === 429) {
                    throw new Error('Too many requests. Please try again later.');
                } else {
                    throw new Error(`API request failed with status ${response.status}`);
                }
            }

            const data = await response.json();
            
            if (!data.candidates?.[0]?.content?.parts?.[0]?.text) {
                throw new Error('Invalid response format from API');
            }
            
            return data.candidates[0].content.parts[0].text;
        } catch (error) {
            console.error('Gemini API Error:', error);
            
            // Provide specific suggestions based on error type
            if (error.message.includes('API key')) {
                return "There's an issue with our service configuration. Please contact support for assistance.";
            } else if (error.message.includes('requests')) {
                return "Our service is currently busy. Please try again in a few moments.";
            } else {
                return `I'm having trouble connecting right now. Here are some suggestions:
1. Check your internet connection
2. Try refreshing the page
3. Visit our FAQ page at https://greencart.com/faq
4. Contact support at +91-9876543210 or support@greencart.com`;
            }
        }
    }

    // Update the getLocalResponse method
    getLocalResponse(message) {
        const lowerMessage = message.toLowerCase();
        
        // Common questions and responses
        const commonResponses = {
            'order status': 'You can check your order status in your account dashboard.',
            'delivery time': 'Our standard delivery time is 1-2 business days.',
            'payment options': 'We accept all major credit cards, UPI, and net banking.',
            'return policy': 'We offer a 7-day return policy for fresh produce.',
            'contact support': 'You can reach us at +91-9876543210 or support@greencart.com',
            'working hours': 'Our support team is available from 9 AM to 9 PM, 7 days a week.',
            'green goddess salad': `Here's our refreshing Green Goddess Salad recipe:
Ingredients:
- Spinach (from Green Cart for freshness)
- Avocado
- Cucumber (in season now)
- Cilantro (for a zesty touch)
- Olive oil
- Lemon juice

Cooking Tips:
1. Massage the spinach with olive oil to soften it
2. Dice the avocado and cucumber for even distribution
3. Chop the cilantro finely to release its aroma
4. Drizzle with lemon juice for a tangy kick

Health Benefits:
- Spinach: Rich in iron, folate, and antioxidants
- Avocado: Good source of healthy fats, fiber, and potassium
- Cucumber: Hydrating and contains electrolytes
- Cilantro: Anti-inflammatory and aids digestion`,
            'recipe': 'Here are some popular recipes: Green Goddess Salad, Seasonal Veggie Stir Fry, Kale and Quinoa Bowl. Which one would you like to know more about?'
        };

        // Check for recipe-related keywords
        const recipeKeywords = ['recipe', 'salad', 'cook', 'make', 'prepare'];
        if (recipeKeywords.some(keyword => lowerMessage.includes(keyword))) {
            return commonResponses['recipe'];
        }

        // Check for specific recipe names
        for (const [key, response] of Object.entries(commonResponses)) {
            if (lowerMessage.includes(key)) {
                return response;
            }
        }

        return null;
    }

    addMessage(type, content) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `p-3 rounded-lg ${
            type === 'user' 
                ? 'bg-green-100 ml-8' 
                : 'bg-gray-100 mr-8'
        }`;
        messageDiv.textContent = content;
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    addLoadingIndicator() {
        const loadingDiv = document.createElement('div');
        loadingDiv.id = 'loadingIndicator';
        loadingDiv.className = 'p-3 rounded-lg bg-gray-100 mr-8';
        loadingDiv.textContent = 'Typing...';
        this.chatMessages.appendChild(loadingDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    removeLoadingIndicator() {
        const loadingDiv = document.getElementById('loadingIndicator');
        if (loadingDiv) {
            loadingDiv.remove();
        }
    }

    addErrorMessage() {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'p-3 rounded-lg bg-red-100 mr-8';
        messageDiv.textContent = 'Sorry, I encountered an error. Please try again later.';
        this.chatMessages.appendChild(messageDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }
}

// Initialize chatbot when the page loads
document.addEventListener('DOMContentLoaded', () => {
    new ChatBot();
});
</script> 